{"type":"data","nodes":[null,{"type":"data","data":[{"title":1,"summary":2,"formattedDate":3,"content":4,"tags":5},"🏅 프로그래머스 133500 : 등대 - Javascript","프로그래머스 133500 : 등대 문제를 Javascript로 풀이한 내용입니다.","2023-03-14","\u003Ch2 >문제 설명\u003C/h2> \u003Cul >\u003Cli>출처: \u003Ca href=\"https://school.programmers.co.kr/learn/courses/30/lessons/133500\" rel=\"noopener noreferrer\" target=\"_blank\">프로그래머스 133500 : 등대\u003C/a>\u003C/li>\u003C/ul> \u003Cp >인천 앞바다에는 1부터 n까지 서로 다른 번호가 매겨진 등대 n개가 존재합니다. 등대와 등대 사이를 오가는 뱃길이 n-1개 존재하여, 어느 등대에서 출발해도 다른 모든 등대까지 이동할 수 있습니다. 등대 관리자 윤성이는 전력을 아끼기 위하여, 이 중 몇 개의 등대만 켜 두려고 합니다. 하지만 등대를 아무렇게나 꺼버리면, 뱃길을 오가는 배들이 위험할 수 있습니다. 한 뱃길의 양쪽 끝 등대 중 적어도 하나는 켜져 있도록 등대를 켜 두어야 합니다.\u003C/p> \u003Cp >예를 들어, 아래 그림과 같이 등대 8개와 7개의 뱃길들이 있다고 합시다. 이 경우 1번 등대와 5번 등대 두 개만 켜 두어도 모든 뱃길은 양쪽 끝 등대 중 하나가 켜져 있으므로, 배들은 안전하게 운항할 수 있습니다.\u003C/p> \u003Cp >\u003Cimg src=\"133500-example1.png\" alt=\"example img\">\u003C/p> \u003Cp >등대의 개수 \u003Ccode>n\u003C/code>과 각 뱃길이 연결된 등대의 번호를 담은 이차원 배열 \u003Ccode>lighthouse\u003C/code>가 매개변수로 주어집니다. 윤성이가 켜 두어야 하는 등대 개수의 최솟값을 return 하도록 solution 함수를 작성해주세요.\u003C/p> \u003Chr> \u003Ch2 >제한사항\u003C/h2> \u003Cul >\u003Cli>2 ≤ \u003Ccode>n\u003C/code> ≤ 100,000\u003C/li> \u003Cli>\u003Ccode>lighthouse\u003C/code>의 길이 = \u003Ccode>n – 1\u003C/code>\u003Cul>\u003Cli>\u003Ccode>lighthouse\u003C/code> 배열의 각 행 \u003Ccode>[a, b]\u003C/code>는 \u003Ccode>a\u003C/code>번 등대와 \u003Ccode>b\u003C/code>번 등대가 뱃길로 연결되어 있다는 의미입니다.\u003Cul>\u003Cli>1 ≤ \u003Ccode>a\u003C/code> ≠ \u003Ccode>b\u003C/code> ≤ \u003Ccode>n\u003C/code>\u003C/li> \u003Cli>모든 등대는 서로 다른 등대로 이동할 수 있는 뱃길이 존재하도록 입력이 주어집니다.\u003C/li>\u003C/ul>\u003C/li>\u003C/ul>\u003C/li>\u003C/ul> \u003Chr> \u003Ch2 >입출력 예\u003C/h2> \u003Ctable >\u003Cthead>\u003Ctr>\u003Cth align=\"left\">n\u003C/th> \u003Cth align=\"left\">lighthouse\u003C/th> \u003Cth align=\"left\">result\u003C/th>\u003C/tr>\u003C/thead> \u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">8\u003C/td> \u003Ctd align=\"left\">[[1, 2], [1, 3], [1, 4], [1, 5], [5, 6], [5, 7], [5, 8]]\u003C/td> \u003Ctd align=\"left\">2\u003C/td>\u003C/tr> \u003Ctr>\u003Ctd align=\"left\">40\u003C/td> \u003Ctd align=\"left\">[[4, 1], [5, 1], [5, 6], [7, 6], [1, 2], [1, 3], [6, 8], [2, 9], [9, 10]]\u003C/td> \u003Ctd align=\"left\">3\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table> \u003Cul >\u003Cli>\u003Cp>예제 #1\u003Cbr>\n본문에서 설명한 예시입니다.\u003C/p>\u003C/li> \u003Cli>\u003Cp>예제 #2\u003Cbr>\n뱃길은 아래 그림과 같이 연결되어 있습니다. 윤성이가 이중 1, 6, 9번 등대 3개만 켜 두어도 모든 뱃길은 양쪽 끝 등대 중 하나가 켜져 있게 되고, 이때의 등대 개수 3개가 최소가 됩니다.\n\u003Cimg src=\"133500-example2.png\" alt=\"example img\">\u003C/p>\u003C/li>\u003C/ul> \u003Chr> \u003Ch2 >풀이 과정\u003C/h2> \u003Cp >먼저 주어진 조건을 파악해봅시다.\u003C/p> \u003Cul >\u003Cli>\u003Cp>조건 1. \u003Cem>\u003Ccode>lighthouse\u003C/code>의 길이 = \u003Ccode>n – 1\u003C/code>\u003C/em>\u003Cbr> \u003Ccode>등대 사이의 길의 수가 등대의 수 -1\u003C/code>이라는 이 조건은 등대의 수와 길의 수가 동일한 아래와 같은 형태의 뱃길가 존재하지 않음을 알려줍니다.\u003C/p> \u003Cp>\u003Cstrong>\u003Cimg src=\"133500-description1.png\" alt=\"description img\">\u003C/strong>\u003C/p>\u003C/li> \u003Cli>\u003Cp>조건 2. \u003Cem>모든 등대는 서로 다른 등대로 이동할 수 있는 뱃길이 존재하도록 입력이 주어집니다.\u003C/em>\u003Cbr> \u003Ccode>모든 등대는 다른 등대와 길이 연결되어 있다\u003C/code>라는 이 조건은 아래와 같은 형태의 뱃길이 존재하지 않음을 알려줍니다.\u003C/p> \u003Cp>\u003Cstrong>\u003Cimg src=\"133500-description2.png\" alt=\"description img\">\u003C/strong>\u003C/p>\u003C/li>\u003C/ul> \u003Chr> \u003Cp >위 두가지 조건을 통해 뱃길에는 항상 끝에 위치한 등대가 존재하고, 모든 등대는 1개 이상의 길과 연결되어있음을 파악했습니다.\u003C/p> \u003Cp >이제 가장 적은 수의 등대만 켜기 위해 반드시 켜져야하는 등대를 찾아야합니다.\u003C/p> \u003Cp >먼저 끝에 위치한 등대, 즉, 길이 1개뿐인 등대는 반드시 자신 혹은 연결된 등대가 켜져야합니다.\n이때 자신을 켜는 경우엔 무조건 1개의 길만 밝혀지지만 연결된 등대의 불빛을 켤 경우 여러개의 길이 밝혀질 수 있기 때문에 연결된 등대의 불빛을 켜도록 합니다.\u003C/p> \u003Cp >이 후 불빛의 영향을 받아 불빛이 필요 없어진 등대를 목록에서 제거하고 이 과정을 반복해 반드시 불빛이 켜져야하는 최소한의 등대의 수를 구할 수 있습니다.\u003C/p> \u003Chr> \u003Cp >먼저 등대의 연결관계를 관리하기 위해 LightHouse 클래스를 작성했습니다.\n등대 번호를 담는 \u003Ccode>id\u003C/code>, 연결된 등대 객체를 담는 \u003Ccode>connects\u003C/code>를 가진 클래스입니다.\n연결과 연결 해제를 처리하는 메소드까지 먼저 작성해두겠습니다.\u003C/p> \u003Cpre class=\"language-javascript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-javascript\">\u003Cspan class=\"token keyword\">class\u003C/span> \u003Cspan class=\"token class-name\">Lighthouse\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token function\">constructor\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">id\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>id \u003Cspan class=\"token operator\">=\u003C/span> id\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>connects \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">Map\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n  \u003Cspan class=\"token comment\">//다른 등대와 연결시키는 함수\u003C/span>\n  \u003Cspan class=\"token comment\">//자신과 다른 등대의 연결 목록에 서로를 추가함\u003C/span>\n  \u003Cspan class=\"token function\">connect\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">target\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>connects\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">set\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>target\u003Cspan class=\"token punctuation\">.\u003C/span>id\u003Cspan class=\"token punctuation\">,\u003C/span> target\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    target\u003Cspan class=\"token punctuation\">.\u003C/span>connects\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">set\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>id\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n  \u003Cspan class=\"token comment\">//다른 등대와 연결을 해제시키는 함수\u003C/span>\n  \u003Cspan class=\"token function\">disconnect\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">target\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>connects\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">delete\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>target\u003Cspan class=\"token punctuation\">.\u003C/span>id\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    target\u003Cspan class=\"token punctuation\">.\u003C/span>connects\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">delete\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>id\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp >그 후 solution 함수에서 모든 등대의 연결 관계를 기록합니다.\n저는 등대 객체와의 구분을 위해 solution 함수의 인자를 \u003Ccode>lighthouse\u003C/code> 대신 \u003Ccode>connects\u003C/code>로 변경했습니다.\u003C/p> \u003Cpre class=\"language-javascript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-javascript\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">solution\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">n\u003Cspan class=\"token punctuation\">,\u003C/span> connects\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token comment\">//n개의 등대 객체가 담긴 2차원 배열 생성\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> lighthouses \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">Map\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\n    \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token operator\">...\u003C/span>\u003Cspan class=\"token function\">Array\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>n\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">keys\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">map\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">i\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>i \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">Lighthouse\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>i \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n  \u003Cspan class=\"token comment\">//모든 등대의 연결 관계를 적용\u003C/span>\n  connects\n    \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">map\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">\u003Cspan class=\"token punctuation\">[\u003C/span>a\u003Cspan class=\"token punctuation\">,\u003C/span> b\u003Cspan class=\"token punctuation\">]\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>lighthouses\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">get\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>a\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> lighthouses\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">get\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>b\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n    \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">forEach\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">\u003Cspan class=\"token punctuation\">[\u003C/span>a\u003Cspan class=\"token punctuation\">,\u003C/span> b\u003Cspan class=\"token punctuation\">]\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> a\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">connect\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>b\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp >자신과 연결된 등대의 수가 1개인지 확인 하는 메소드와 제거할 수 있는 등대의 목록을 반환하는 메소드를 작성했습니다.\u003C/p> \u003Cpre class=\"language-javascript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-javascript\">\u003Cspan class=\"token comment\">//연결된 등대의 수가 1개인지 확인하는 함수\u003C/span>\n\u003Cspan class=\"token comment\">//연결된 등대의 수가 1개인 경우 반드시 연결된 등대의 불빛이 켜져야함\u003C/span>\n\u003Cspan class=\"token function\">hasOnlyOneConnect\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>connects\u003Cspan class=\"token punctuation\">.\u003C/span>size \u003Cspan class=\"token operator\">===\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token comment\">//제거할 수 있는 등대를 반환하는 함수\u003C/span>\n\u003Cspan class=\"token comment\">//연결된 등대가 1개인 경우, 연결된 등대의 모든 연결을 해제시키고 모든 연결이 해제된 등대의 목록를 반환\u003C/span>\n\u003Cspan class=\"token function\">getRemovalTargets\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token comment\">//모든 연결이 해제되어 제거될 등대를 담는 배열\u003C/span>\n  \u003Cspan class=\"token comment\">//(== 불빛이 켜질 필요가 없는 등대를 담는 배열)\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> removed \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n  \u003Cspan class=\"token comment\">//자신에게 연결된 등대가 1개인 경우\u003C/span>\n  \u003Cspan class=\"token keyword\">if\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">hasOnlyOneConnect\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token comment\">//자신과 연결된 등대 (== 불빛이 켜질 등대)\u003C/span>\n    \u003Cspan class=\"token keyword\">const\u003C/span> connect \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>connects\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">values\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">next\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>value\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n    \u003Cspan class=\"token comment\">//자신과 연결된 등대의 모든 연결을 해제시키고, 모든 연결이 해제된 등대를 제거 목록에 추가\u003C/span>\n    \u003Cspan class=\"token comment\">//(== 자신과 연결된 등대의 불빛을 켜고, 불빛이 켜질 필요가 없는 등대를 제거 목록에 추가)\u003C/span>\n    connect\u003Cspan class=\"token punctuation\">.\u003C/span>connects\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">forEach\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">el\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> el\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">disconnect\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>connect\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">&amp;&amp;\u003C/span> removed\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>el\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n    \u003Cspan class=\"token comment\">//자신과 연결된 등대도 제거 목록에 추가\u003C/span>\n    \u003Cspan class=\"token comment\">//(== 불빛이 켜진 등대도 제거 목록에 추가)\u003C/span>\n    removed\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>connect\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n  \u003Cspan class=\"token comment\">//제거할 등대 목록을 제거\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> removed\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp >마지막으로 solution 함수에서 모든 길이 밝혀질 때까지 반복하고 답을 반환하는 코드를 작성합니다.\u003C/p> \u003Cpre class=\"language-javascript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-javascript\">\u003Cspan class=\"token keyword\">let\u003C/span> answer \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token comment\">//모든 등대가 제거될 때 까지 반복\u003C/span>\n\u003Cspan class=\"token keyword\">while\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>lighthouses\u003Cspan class=\"token punctuation\">.\u003C/span>size \u003Cspan class=\"token operator\">>\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  lighthouses\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">forEach\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">lighthouse\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token keyword\">const\u003C/span> targets \u003Cspan class=\"token operator\">=\u003C/span> lighthouse\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">getRemovalTargets\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>targets\u003Cspan class=\"token punctuation\">.\u003C/span>length\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n      \u003Cspan class=\"token comment\">//제거할 등대가 존재하는 경우 (== 등대의 불빛이 켜진 경우)\u003C/span>\n      \u003Cspan class=\"token comment\">//불빛이 켜진 등대의 수를 증가시키고 제거할 등대를 lighthouse에서 제거\u003C/span>\n      answer\u003Cspan class=\"token operator\">++\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n      targets\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">forEach\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">el\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> lighthouses\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">delete\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>el\u003Cspan class=\"token punctuation\">.\u003C/span>id\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token comment\">//불빛이 켜진 등대의 수를 반환\u003C/span>\n\u003Cspan class=\"token keyword\">return\u003C/span> answer\u003Cspan class=\"token punctuation\">;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Chr> \u003Ch2 >최종 코드\u003C/h2> \u003Cpre class=\"language-javascript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-javascript\">\u003Cspan class=\"token keyword\">class\u003C/span> \u003Cspan class=\"token class-name\">Lighthouse\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token function\">constructor\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">id\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>id \u003Cspan class=\"token operator\">=\u003C/span> id\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>connects \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">Map\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n  \u003Cspan class=\"token comment\">//다른 등대와 연결시키는 함수함수\u003C/span>\n  \u003Cspan class=\"token comment\">//본인과 다른 등대의 자식에 서로를 추가함\u003C/span>\n  \u003Cspan class=\"token function\">connect\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">target\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>connects\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">set\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>target\u003Cspan class=\"token punctuation\">.\u003C/span>id\u003Cspan class=\"token punctuation\">,\u003C/span> target\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    target\u003Cspan class=\"token punctuation\">.\u003C/span>connects\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">set\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>id\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n  \u003Cspan class=\"token comment\">//다른 등대와 연결을 해제하고, 모든 연결이 해제되었는 지 여부를 반환\u003C/span>\n  \u003Cspan class=\"token function\">disconnect\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">target\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>connects\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">delete\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>target\u003Cspan class=\"token punctuation\">.\u003C/span>id\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>connects\u003Cspan class=\"token punctuation\">.\u003C/span>size \u003Cspan class=\"token operator\">===\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n  \u003Cspan class=\"token comment\">//연결된 등대의 수가 1개인지 확인하는 함수\u003C/span>\n  \u003Cspan class=\"token comment\">//연결된 등대의 수가 1개인 경우 반드시 연결된 등대의 불빛이 켜져야함\u003C/span>\n  \u003Cspan class=\"token function\">hasOnlyOneConnect\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>connects\u003Cspan class=\"token punctuation\">.\u003C/span>size \u003Cspan class=\"token operator\">===\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n  \u003Cspan class=\"token comment\">//제거할 수 있는 등대를 반환하는 함수\u003C/span>\n  \u003Cspan class=\"token comment\">//연결된 등대가 1개인 경우, 연결된 등대의 모든 연결을 해제시키고 모든 연결이 해제된 등대의 목록를 반환\u003C/span>\n  \u003Cspan class=\"token function\">getRemovalTargets\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token comment\">//모든 연결이 해제되어 제거될 등대를 담는 배열\u003C/span>\n    \u003Cspan class=\"token comment\">//(== 불빛이 켜질 필요가 없는 등대를 담는 배열)\u003C/span>\n    \u003Cspan class=\"token keyword\">const\u003C/span> removed \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n    \u003Cspan class=\"token comment\">//자신에게 연결된 등대가 1개인 경우\u003C/span>\n    \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">hasOnlyOneConnect\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n      \u003Cspan class=\"token comment\">//자신과 연결된 등대 (== 불빛이 켜질 등대)\u003C/span>\n      \u003Cspan class=\"token keyword\">const\u003C/span> connect \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>connects\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">values\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">next\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>value\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n      \u003Cspan class=\"token comment\">//자신과 연결된 등대의 모든 연결을 해제시키고, 모든 연결이 해제된 등대를 제거 목록에 추가\u003C/span>\n      \u003Cspan class=\"token comment\">//(== 자신과 연결된 등대의 불빛을 켜고, 불빛이 켜질 필요가 없는 등대를 제거 목록에 추가)\u003C/span>\n      connect\u003Cspan class=\"token punctuation\">.\u003C/span>connects\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">forEach\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\n        \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">el\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> el\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">disconnect\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>connect\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">&amp;&amp;\u003C/span> removed\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>el\u003Cspan class=\"token punctuation\">)\u003C/span>\n      \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n      \u003Cspan class=\"token comment\">//자신과 연결된 등대도 제거 목록에 추가\u003C/span>\n      \u003Cspan class=\"token comment\">//(== 불빛이 켜진 등대도 제거 목록에 추가)\u003C/span>\n      removed\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>connect\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n    \u003Cspan class=\"token comment\">//제거할 등대 목록을 제거\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> removed\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">solution\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">n\u003Cspan class=\"token punctuation\">,\u003C/span> connects\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token comment\">//n개의 등대 객체가 담긴 2차원 배열 생성\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> lighthouses \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">Map\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\n    \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token operator\">...\u003C/span>\u003Cspan class=\"token function\">Array\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>n\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">keys\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">map\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">i\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>i \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">Lighthouse\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>i \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n  \u003Cspan class=\"token comment\">//모든 등대의 연결 관계를 적용\u003C/span>\n  connects\n    \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">map\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">\u003Cspan class=\"token punctuation\">[\u003C/span>a\u003Cspan class=\"token punctuation\">,\u003C/span> b\u003Cspan class=\"token punctuation\">]\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>lighthouses\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">get\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>a\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> lighthouses\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">get\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>b\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n    \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">forEach\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">\u003Cspan class=\"token punctuation\">[\u003C/span>a\u003Cspan class=\"token punctuation\">,\u003C/span> b\u003Cspan class=\"token punctuation\">]\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> a\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">connect\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>b\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n  \u003Cspan class=\"token keyword\">let\u003C/span> answer \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token comment\">//모든 등대가 제거될 때 까지 반복\u003C/span>\n  \u003Cspan class=\"token keyword\">while\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>lighthouses\u003Cspan class=\"token punctuation\">.\u003C/span>size \u003Cspan class=\"token operator\">>\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    lighthouses\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">forEach\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">lighthouse\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n      \u003Cspan class=\"token keyword\">const\u003C/span> targets \u003Cspan class=\"token operator\">=\u003C/span> lighthouse\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">getRemovalTargets\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n      \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>targets\u003Cspan class=\"token punctuation\">.\u003C/span>length\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n        \u003Cspan class=\"token comment\">//제거할 등대가 존재하는 경우 (== 등대의 불빛이 켜진 경우)\u003C/span>\n        \u003Cspan class=\"token comment\">//불빛이 켜진 등대의 수를 증가시키고 제거할 등대를 lighthouse에서 제거\u003C/span>\n        answer\u003Cspan class=\"token operator\">++\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n        targets\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">forEach\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">el\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> lighthouses\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">delete\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>el\u003Cspan class=\"token punctuation\">.\u003C/span>id\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n      \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n    \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n  \u003Cspan class=\"token comment\">//불빛이 켜진 등대의 수를 반환\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> answer\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cul class=\"contains-task-list\" >\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> TODO: 추후 코드와 설명을 다시 정리할 예정입니다.\n코드랑 설명이 너무 장황하게 작성된 느낌이 강해서…\u003C/li>\u003C/ul>",[6,7],"알고리즘","프로그래머스"],"uses":{"params":["permalink"]}}]}

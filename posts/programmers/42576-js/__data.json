{"type":"data","nodes":[null,{"type":"data","data":[{"title":1,"summary":2,"formattedDate":3,"content":4,"tags":5},"🏅 프로그래머스 42576 : 완주하지 못한 선수 - Javascript","프로그래머스 42576 : 완주하지 못한 선수 문제를 Javascript로 풀이한 내용입니다.","2023-02-02","\u003Ch2 >문제 설명\u003C/h2> \u003Cul >\u003Cli>출처: \u003Ca href=\"https://school.programmers.co.kr/learn/courses/30/lessons/42576\" rel=\"noopener noreferrer\" target=\"_blank\">프로그래머스 42576 : 완주하지 못한 선수\u003C/a>\u003C/li>\u003C/ul> \u003Cp >수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.\u003C/p> \u003Cp >마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.\u003C/p> \u003Chr> \u003Ch2 >제한사항\u003C/h2> \u003Cul >\u003Cli>마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.\u003C/li> \u003Cli>completion의 길이는 participant의 길이보다 1 작습니다.\u003C/li> \u003Cli>참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.\u003C/li> \u003Cli>참가자 중에는 동명이인이 있을 수 있습니다.\u003C/li>\u003C/ul> \u003Chr> \u003Ch2 >입출력 예\u003C/h2> \u003Ctable >\u003Cthead>\u003Ctr>\u003Cth align=\"left\">participant\u003C/th> \u003Cth align=\"left\">completion\u003C/th> \u003Cth align=\"left\">return\u003C/th>\u003C/tr>\u003C/thead> \u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">[“leo”, “kiki”, “eden”]\u003C/td> \u003Ctd align=\"left\">[“eden”, “kiki”]\u003C/td> \u003Ctd align=\"left\">“leo”\u003C/td>\u003C/tr> \u003Ctr>\u003Ctd align=\"left\">[“marina”, “josipa”, “nikola”, “vinko”, “filipa”]\u003C/td> \u003Ctd align=\"left\">[“josipa”, “filipa”, “marina”, “nikola”]\u003C/td> \u003Ctd align=\"left\">“vinko”\u003C/td>\u003C/tr> \u003Ctr>\u003Ctd align=\"left\">[“mislav”, “stanko”, “mislav”, “ana”]\u003C/td> \u003Ctd align=\"left\">[“stanko”, “ana”, “mislav”]\u003C/td> \u003Ctd align=\"left\">“mislav”\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table> \u003Cul >\u003Cli>\u003Cp>예제 #1\u003Cbr>\n“leo”는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.\u003C/p>\u003C/li> \u003Cli>\u003Cp>예제 #2\u003Cbr>\n“vinko”는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.\u003C/p>\u003C/li> \u003Cli>\u003Cp>예제 #3\u003Cbr>\n“mislav”는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다.\u003C/p>\u003C/li>\u003C/ul> \u003Chr> \u003Ch2 >풀이 과정\u003C/h2> \u003Cp >전체 선수(participant) 중 완주한 선수(completion) 목록에 존재하지 않는 선수 한 명을 찾아내야 합니다.\u003C/p> \u003Chr> \u003Ch3 >시도 1\u003C/h3> \u003Cp >\u003Ccode>splice\u003C/code>와 \u003Ccode>indexOf\u003C/code>를 이용해 완주한 선수(completion)를 전체 선수(participant)에서 하나씩 소거한 뒤, 남은 한 선수의 이름을 반환하는 방식으로 풀어봤습니다.\u003C/p> \u003Cpre class=\"language-javascript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-javascript\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">solution\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">participant\u003Cspan class=\"token punctuation\">,\u003C/span> completion\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token comment\">// 전체 선수 목록에서 완주한 선수의 이름을 하나씩 소거\u003C/span>\n  \u003Cspan class=\"token keyword\">for\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>name \u003Cspan class=\"token keyword\">of\u003C/span> completion\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    participant\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">splice\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>participant\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">indexOf\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>name\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n  \u003Cspan class=\"token comment\">// 전체 선수 목록에서 남아있는 선수의 이름을 반환\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> participant\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp >하지만 정확도 테스트는 통과하고 시간 초과로 효율성 테스트는 통과하지 못했습니다. 배열을 수정하는 \u003Ccode>splice\u003C/code>가 느리기 때문에 생긴 문제인 듯 합니다.\u003C/p> \u003Chr> \u003Ch3 >시도 2\u003C/h3> \u003Cp >아래와 같이 해쉬를 이용해 문제를 다시 풀었고, 성공적으로 효율성 테스트까지 통과했습니다.\u003C/p> \u003Cpre class=\"language-javascript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-javascript\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">solution\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">participant\u003Cspan class=\"token punctuation\">,\u003C/span> completion\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token comment\">// 완주한 선수의 이름의 개수를 저장할 변수 선언\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> counts \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n  \u003Cspan class=\"token comment\">// 완주한 선수의 이름의 개수를 &#96;counts&#96; 변수에 담기\u003C/span>\n  \u003Cspan class=\"token keyword\">for\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>name \u003Cspan class=\"token keyword\">of\u003C/span> completion\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>counts\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n      counts\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token operator\">++\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token punctuation\">&#125;\u003C/span> \u003Cspan class=\"token keyword\">else\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n      counts\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n  \u003Cspan class=\"token keyword\">for\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>name \u003Cspan class=\"token keyword\">of\u003C/span> participant\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>counts\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n      counts\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token operator\">--\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">// 선수 이름이 있으면 개수 1 감소\u003C/span>\n    \u003Cspan class=\"token punctuation\">&#125;\u003C/span> \u003Cspan class=\"token keyword\">else\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n      \u003Cspan class=\"token keyword\">return\u003C/span> name\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">// 선수 이름이 없거나 0이면 해당 선수의 이름을 반환\u003C/span>\n    \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Chr> \u003Ch2 >숏코딩 (CodeGolf)\u003C/h2> \u003Cp >조금 더 코드를 간결하게 바꾸기 위해 조건식 부분을 수정해 아래와 같이 정리 가능합니다.\u003C/p> \u003Cpre class=\"language-javascript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-javascript\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">solution\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">participant\u003Cspan class=\"token punctuation\">,\u003C/span> completion\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> counts \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token keyword\">for\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>name \u003Cspan class=\"token keyword\">of\u003C/span> completion\u003Cspan class=\"token punctuation\">)\u003C/span> counts\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>counts\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">|\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token keyword\">for\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>name \u003Cspan class=\"token keyword\">of\u003C/span> participant\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token operator\">!\u003C/span>counts\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token operator\">--\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token keyword\">return\u003C/span> name\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cdiv class=\"admonition admonition-help\" >\u003Cdiv class=\"admonition-heading\">\u003Ch5>\u003Cspan class=\"admonition-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\u003Cpath class=\"outlined\" d=\"M9,10a3,3 0,1,1 3,2.5v2m0,3v0M12,3a9,9 0,1,1-.1,0\">\u003C/path>\u003C/svg>\u003C/span>\u003Ccode>counts\u003C/code>에 \u003Ccode>name\u003C/code>이 없을 수도 있는데 \u003Ccode>!counts[name]--\u003C/code>이 왜 제대로 작동하나요?\u003C/h5>\u003C/div>\u003Cdiv class=\"admonition-content\">\u003Col>\u003Cli>\u003Ccode>counts[name]\u003C/code>가 비어있을 경우 접근하면 \u003Ccode>undefined\u003C/code>를 반환합니다.\u003C/li> \u003Cli>\u003Ccode>undefined\u003C/code>가 산술 연산자와 만나면 오류 없이 \u003Ccode>NaN\u003C/code>으로 바뀌게 됩니다.\u003C/li> \u003Cli>\u003Ccode>NaN\u003C/code>은 논리값 거짓으로 변환되기 때문에, \u003Ccode>!NaN\u003C/code>은 \u003Ccode>true\u003C/code>로 변환됩니다.\u003C/li> \u003C/ol>\u003Cul>\u003Cli>따라서 \u003Ccode>counts[name]\u003C/code>이 존재하지 않을 때, \u003Ccode>!counts[name]--\u003C/code>는 \u003Ccode>true\u003C/code>으로 변환됩니다.\u003C/li> \u003C/ul>\u003Cp>이러한 과정을 통해 매핑된 값이 없는 경우에도 선수의 이름을 반환하는 로직이 정상적으로 작동하게 됩니다.\u003C/p>\u003C/div>\u003C/div> \u003Chr> \u003Cp >추가로 \u003Ccode>counts\u003C/code> 객체 생성 라인을 제거하고 \u003Ccode>completion\u003C/code> 배열을 해쉬맵 용도로 재사용합니다.\u003C/p> \u003Cpre class=\"language-javascript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-javascript\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">solution\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">participant\u003Cspan class=\"token punctuation\">,\u003C/span> completion\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token keyword\">for\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>name \u003Cspan class=\"token keyword\">of\u003C/span> completion\u003Cspan class=\"token punctuation\">)\u003C/span> completion\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>completion\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">|\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token keyword\">for\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>name \u003Cspan class=\"token keyword\">of\u003C/span> participant\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token operator\">!\u003C/span>completion\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token operator\">--\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token keyword\">return\u003C/span> name\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cdiv class=\"admonition admonition-help\" >\u003Cdiv class=\"admonition-heading\">\u003Ch5>\u003Cspan class=\"admonition-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\u003Cpath class=\"outlined\" d=\"M9,10a3,3 0,1,1 3,2.5v2m0,3v0M12,3a9,9 0,1,1-.1,0\">\u003C/path>\u003C/svg>\u003C/span>\u003Ccode>completion\u003C/code>는 배열인데 어떻게 키값을 인덱스로 사용 할 수 있나요?\u003C/h5>\u003C/div>\u003Cdiv class=\"admonition-content\">\u003Cul>\u003Cli>자바스크립트에서는 배열 또한 \u003Ccode>Array\u003C/code>라는 객체이기 때문에 속성(property)을 추가할 수가 있습니다.\u003C/li> \u003Cli>따라서 \u003Ccode>completion[name]\u003C/code>이라는 코드가 정상적으로 작동하게 됩니다.\u003C/li>\u003C/ul>\u003C/div>\u003C/div> \u003Chr> \u003Cp >\u003Ccode>for-of\u003C/code>를 \u003Ccode>map()\u003C/code>과 \u003Ccode>find()\u003C/code> 메소드로 바꾸고 한줄의 코드로 합칩니다.\u003C/p> \u003Cpre class=\"language-javascript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-javascript\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">solution\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">participant\u003Cspan class=\"token punctuation\">,\u003C/span> completion\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  completion\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">map\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">name\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>completion\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>completion\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">|\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> participant\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">find\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">name\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token operator\">!\u003C/span>completion\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token operator\">--\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> completion\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cpre class=\"language-javascript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-javascript\">\u003Cspan class=\"token function-variable function\">solution\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">participant\u003Cspan class=\"token punctuation\">,\u003C/span> completion\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span>\n  participant\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">find\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\n    \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">name\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token operator\">!\u003C/span>completion\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token operator\">--\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    completion\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">map\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">name\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>completion\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>completion\u003Cspan class=\"token punctuation\">[\u003C/span>name\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">|\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Chr> \u003Cp >마지막으로 가독성을 포기하고 모든 이름을 한글자로 수정하면 아래와 같이 숏코딩 코드가 완성됩니다.\u003C/p> \u003Cpre class=\"language-c\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-c\">solution\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>p\u003Cspan class=\"token punctuation\">,\u003C/span>c\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>p\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">find\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>n\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token operator\">!\u003C/span>c\u003Cspan class=\"token punctuation\">[\u003C/span>n\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token operator\">--\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>c\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">map\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>n\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>c\u003Cspan class=\"token punctuation\">[\u003C/span>n\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>c\u003Cspan class=\"token punctuation\">[\u003C/span>n\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token operator\">|\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">+\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>",[6,7],"알고리즘","프로그래머스"],"uses":{"params":["permalink"]}}]}

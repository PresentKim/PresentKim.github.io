{"type":"data","nodes":[null,{"type":"data","data":[{"title":1,"summary":2,"formattedDate":3,"content":4,"tags":5},"🏅 프로그래머스 120876 : 겹치는 선분의 길이 - Javascript","프로그래머스 120876 : 겹치는 선분의 길이 문제를 Javascript로 풀이한 내용입니다.","2023-03-03","\u003Ch2 >문제 설명\u003C/h2> \u003Cul >\u003Cli>출처: \u003Ca href=\"https://school.programmers.co.kr/learn/courses/30/lessons/120876\" rel=\"noopener noreferrer\" target=\"_blank\">프로그래머스 120876 : 겹치는 선분의 길이\u003C/a>\u003C/li>\u003C/ul> \u003Cp >선분 3개가 평행하게 놓여 있습니다. 세 선분의 시작과 끝 좌표가 [[start, end], [start, end], [start, end]] 형태로 들어있는 2차원 배열 \u003Ccode>lines\u003C/code>가 매개변수로 주어질 때, 두 개 이상의 선분이 겹치는 부분의 길이를 return 하도록 solution 함수를 완성해보세요.\u003C/p> \u003Cp >\u003Ccode>lines\u003C/code>가 [[0, 2], [-3, -1], [-2, 1]]일 때 그림으로 나타내면 다음과 같습니다.\u003C/p> \u003Cp >\u003Cimg src=\"120876-example.png\" alt=\"example img\">\u003C/p> \u003Cp >선분이 두 개 이상 겹친 곳은 [-2, -1], [0, 1]로 길이 2만큼 겹쳐있습니다.\u003C/p> \u003Chr> \u003Ch2 >제한사항\u003C/h2> \u003Cul>\u003Cli >\u003Ccode>lines\u003C/code>의 길이 = 3\u003C/li> \u003Cli >\u003Ccode>lines\u003C/code>의 원소의 길이 = 2\u003C/li> \u003Cli >모든 선분은 길이가 1 이상입니다.\u003C/li> \u003Cli>\u003Ccode >lines\u003C/code>의 원소는 [a, b] 형태이며, a, b는 각각 선분의 양 끝점 입니다.\u003Cul>\u003Cli>-100 ≤ a \u003Cspan class=\"math math-inline\">\u003C!-- HTML_TAG_START -->\u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmo>&lt;\u003C/mo>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">&lt;\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\">\u003C/span>\u003Cspan class=\"mrel\">&lt;\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C!-- HTML_TAG_END -->\u003C/span> b ≤ 100\u003C/li>\u003C/ul>\u003C/li>\u003C/ul> \u003Chr> \u003Ch2 >입출력 예\u003C/h2> \u003Ctable >\u003Cthead>\u003Ctr>\u003Cth align=\"left\">lines\u003C/th> \u003Cth align=\"left\">result\u003C/th>\u003C/tr>\u003C/thead> \u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">[[0, 1], [2, 5], [3, 9]]\u003C/td> \u003Ctd align=\"left\">2\u003C/td>\u003C/tr> \u003Ctr>\u003Ctd align=\"left\">[[-1, 1], [1, 3], [3, 9]]\u003C/td> \u003Ctd align=\"left\">0\u003C/td>\u003C/tr> \u003Ctr>\u003Ctd align=\"left\">[[0, 5], [3, 9], [1, 10]]\u003C/td> \u003Ctd align=\"left\">8\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table> \u003Cul >\u003Cli>\u003Cp>예제 #1\u003Cbr>\n두 번째, 세 번째 선분 [2, 5], [3, 9]가 [3, 5] 구간에 겹쳐있으므로 2를 return 합니다.\u003C/p>\u003C/li> \u003Cli>\u003Cp>예제 #2\u003Cbr>\n겹친 선분이 없으므로 0을 return 합니다.\u003C/p>\u003C/li> \u003Cli>\u003Cp>예제 #2\u003C/p> \u003Cul>\u003Cli>첫 번째와 두 번째 선분이 [3, 5] 구간에서 겹칩니다.\u003C/li> \u003Cli>첫 번째와 세 번째 선분 [1, 5] 구간에서 겹칩니다.\u003C/li> \u003Cli>두 번째와 세 번째 선분 [3, 9] 구간에서 겹칩니다.\u003C/li> \u003Cli>따라서 [1, 9] 구간에 두 개 이상의 선분이 겹쳐있으므로, 8을 return 합니다.\u003C/li>\u003C/ul>\u003C/li>\u003C/ul> \u003Chr> \u003Ch2 >풀이 과정\u003C/h2> \u003Cp >배열을 하나 생성해 선분이 놓이는 위치의 값을 1씩 증가시키고, 1을 초과하는 요소의 수를 반환하는 간단한 방법으로 시도했습니다.\u003C/p> \u003Cpre class=\"language-javascript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-javascript\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">solution\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">lines\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token comment\">//선분이 존재하는 위치를 배열에 담음\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> line \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token keyword\">for\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>start\u003Cspan class=\"token punctuation\">,\u003C/span> end\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token keyword\">of\u003C/span> lines\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token keyword\">for\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">let\u003C/span> i \u003Cspan class=\"token operator\">=\u003C/span> start\u003Cspan class=\"token punctuation\">;\u003C/span> i \u003Cspan class=\"token operator\">&lt;\u003C/span> end\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token operator\">++\u003C/span>i\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n      line\u003Cspan class=\"token punctuation\">[\u003C/span>i\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>line\u003Cspan class=\"token punctuation\">[\u003C/span>i\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">??\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n  \u003Cspan class=\"token comment\">//배열의 요소 중 1을 초과하는 요소의 수를 반환\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> line\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">filter\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">count\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> count \u003Cspan class=\"token operator\">>\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>length\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp >하지만 위 코드는 start와 end가 음수인 경우 제대로 작동하지 않아 실패했습니다.\n음수를 처리하기 위해 배열이 아닌 맵에 담도록 수정했습니다.\u003C/p> \u003Cpre class=\"language-javascript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-javascript\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">solution\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">lines\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token comment\">//선분이 존재하는 위치를 맵에 담음\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> line \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">Map\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token keyword\">for\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">let\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>start\u003Cspan class=\"token punctuation\">,\u003C/span> end\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token keyword\">of\u003C/span> lines\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token keyword\">for\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">let\u003C/span> i \u003Cspan class=\"token operator\">=\u003C/span> start\u003Cspan class=\"token punctuation\">;\u003C/span> i \u003Cspan class=\"token operator\">&lt;\u003C/span> end\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token operator\">++\u003C/span>i\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n      line\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">set\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>i\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>line\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">get\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>i\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">??\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n  \u003Cspan class=\"token comment\">//맵의 요소 중 1을 초과하는 요소의 수를 반환\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token operator\">...\u003C/span>line\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">values\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">filter\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">count\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> count \u003Cspan class=\"token operator\">>\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>length\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Chr> \u003Ch3 >또다른 방법\u003C/h3> \u003Cp >배열 대신 맵을 사용 방법으로 이미 해결했지만 배열을 사용하지 못했던 이유는 음수 인덱스를 제대로 처리하지 못하기 때문인데,\n이 문제의 경우 \u003Ccode>line\u003C/code>의 요소의 값이 -100 이상으로 제한 되어있기 때문에 아래와 같이 인덱스에 100을 더하는 방식으로도 해결할 수 있습니다.\u003C/p> \u003Cpre class=\"language-javascript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-javascript\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">solution\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">lines\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token comment\">//선분이 존재하는 위치를 배열에 담음\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> line \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token keyword\">for\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>start\u003Cspan class=\"token punctuation\">,\u003C/span> end\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token keyword\">of\u003C/span> lines\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token keyword\">for\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">let\u003C/span> i \u003Cspan class=\"token operator\">=\u003C/span> start\u003Cspan class=\"token punctuation\">;\u003C/span> i \u003Cspan class=\"token operator\">&lt;\u003C/span> end\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token operator\">++\u003C/span>i\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n      \u003Cspan class=\"token comment\">//음수를 처리하기 위해 인덱스에 100을 더함 (-100 이상이기 때문)\u003C/span>\n      line\u003Cspan class=\"token punctuation\">[\u003C/span>i \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">100\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>line\u003Cspan class=\"token punctuation\">[\u003C/span>i \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">100\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">??\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n  \u003Cspan class=\"token comment\">//배열의 요소 중 1을 초과하는 요소의 수를 반환\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> line\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">filter\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">count\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> count \u003Cspan class=\"token operator\">>\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>length\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>",[6,7],"알고리즘","프로그래머스"],"uses":{"params":["permalink"]}}]}

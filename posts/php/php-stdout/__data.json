{"type":"data","nodes":[null,{"type":"data","data":[{"title":1,"summary":2,"formattedDate":3,"content":4,"tags":5},"PHP에서 문자를 출력하는 방법","PHP에서 사용 가능한 여러 문자 출력 방식을 설명합니다","2022-11-09","\u003Cp >PHP에선 콘솔에 문자를 출력할 수 있는 다양한 방법이 있다.\u003Cbr>\n이 글에선 방법의 예시와 차이점, 그리고 주의점을 설명한다.\u003Cbr>\n특히 잘 놓칠 수 있는 주의할 점에 대해 자세히 설명하려 한다.\u003C/p> \u003Ch2 >1 PHP 태그 밖에 작성하기\u003C/h2> \u003Cp >먼저 php는 html을 포함해 작성하기 위해서 \u003Ccode>&lt;?php\u003C/code> 태그로 감싸지지 않은 내용을 그대로 출력하는 특징을 갖고 있다.\u003C/p> \u003Cpre class=\"language-php\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-php\">Hello,World!\u003Cspan class=\"token php language-php\">\u003Cspan class=\"token delimiter important\">&lt;?\u003C/span> \u003Cspan class=\"token keyword\">echo\u003C/span> \u003Cspan class=\"token string double-quoted-string\">\" is old \"\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token delimiter important\">?>\u003C/span>\u003C/span>message...\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp >위처럼 작성하면 \u003Ccode>Hello,World! is old message...\u003C/code>가 출력된다.\u003Cbr>\n따라서 정해진 문자를 출력해야 하는 php문서의 경우 그냥 해당 부분을 PHP태그 밖에 작성하면 된다.\u003Cbr>\n하지만 HTML을 포함하는 문서에나 사용되는 방식이기 떄문에 거의 출력 자체를 용도로 사용하지는 않는다고 보면 된다.\u003C/p> \u003Ch3 >2 \u003Ccode>&lt;?=\u003C/code>태그를 사용하기\u003C/h3> \u003Cp >\u003Ccode>&lt;?=\u003C/code> 태그는 \u003Ccode>&lt;?php echo\u003C/code>의 축약형이다.\u003C/p> \u003Cpre class=\"language-php\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-php\">\u003Cspan class=\"token php language-php\">\u003Cspan class=\"token delimiter important\">&lt;?=\u003C/span>\u003Cspan class=\"token string double-quoted-string\">\"Hello,\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\u003Cspan class=\"token string double-quoted-string\">\"World!\"\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp >위처럼 작성하면 \u003Ccode>Hello World!\u003C/code>가 출력된다.\u003Cbr> \u003Ccode>echo\u003C/code>를 축약한 것이기 때문에 \u003Ccode>echo\u003C/code>와 동일하게 여러 인자를 받을 수 있다.\u003C/p> \u003Ch2 >2. 문자 출력 키워드 사용하기\u003C/h2> \u003Ch3 >2.1 사용법\u003C/h3> \u003Cp >PHP의 키워드 중에선 주어진 값을 그대로 출력하는 \u003Ccode>echo\u003C/code>와 \u003Ccode>print\u003C/code>가 있다.\n문자열이나 숫자 등 변환 없이 출력 가능한 값들을 출력할 때 주로 사용한다.\u003C/p> \u003Cpre class=\"language-php\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-php\">\u003Cspan class=\"token keyword\">print\u003C/span> \u003Cspan class=\"token string double-quoted-string\">\"안녕, 세상!\"\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>  \u003Cspan class=\"token comment\">//출력: \"안녕, 세상!\"\u003C/span>\n\u003Cspan class=\"token keyword\">print\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string double-quoted-string\">\"안녕, 세상!\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//출력: \"안녕, 세상!\"\u003C/span>\n\n\u003Cspan class=\"token keyword\">print\u003C/span> \u003Cspan class=\"token number\">1234\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>  \u003Cspan class=\"token comment\">//출력: \"1234\"\u003C/span>\n\u003Cspan class=\"token keyword\">print\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">1234\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//출력: \"1234\"\u003C/span>\n\n\u003Cspan class=\"token comment\">//문법에 문제가 없다면 공백이 없어도 된다\u003C/span>\n\u003Cspan class=\"token keyword\">print\u003C/span>\u003Cspan class=\"token string double-quoted-string\">\"안녕, 세상!\"\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//출력: \"안녕, 세상!\"\u003C/span>\n\n\u003Cspan class=\"token comment\">//아래 코드는 문법 오류가 발생한다\u003C/span>\nprint1234\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//오류: Undefined constant \"print1234\"\u003C/span>\n\n\u003Cspan class=\"token comment\">//추가로 만약 배열이나 실수 등의 값이면 제대로 출력되지 않을 수 있다\u003C/span>\n\u003Cspan class=\"token variable\">$arr\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1234567890.0123456789\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">0.0123456789123456789\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">print\u003C/span> \u003Cspan class=\"token variable\">$arr\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//출력: \"Array\"\u003C/span>\n\u003Cspan class=\"token keyword\">print\u003C/span> \u003Cspan class=\"token variable\">$arr\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//출력: \"1234567890.0123\"\u003C/span>\n\u003Cspan class=\"token keyword\">print\u003C/span> \u003Cspan class=\"token variable\">$arr\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//출력: \"0.012345678912346\"\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Ch3 >2.2 주의점\u003C/h3> \u003Cp >\u003Ccode>echo\u003C/code>와 \u003Ccode>print\u003C/code>는 모두 함수가 아닌 키워드이다.\u003Cbr>\n가독성을 위해 소괄호\u003Ccode>()\u003C/code>로 감싸 함수처럼 보이게 사용은 가능하지만, 괄호는 필수가 아니다.\n이를 구분하지 못하고 함수처럼 사용할 경우, 아래 코드처럼 전혀 예상하지 못한 실행 결과가 발생할 수 있다.\u003C/p> \u003Cpre class=\"language-php\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-php\">\u003Cspan class=\"token keyword\">print\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">/\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//출력: \"1\"\u003C/span>\n\u003Cspan class=\"token comment\">//위 코드는 먼저 &#96;(1 + 3) / 4&#96;를 계산한 뒤, 그 결과를 출력한다\u003C/span>\n\n\u003Cspan class=\"token keyword\">print\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">5677\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token keyword\">print\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">1234\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//출력: \"12345678\"\u003C/span>\n\u003Cspan class=\"token comment\">//위 코드는 \"1234\"를 먼저 출력하고 &#96;(5677) + 1&#96;을 계산한 뒤, 그 결과를 출력한다\u003C/span>\n\n\u003Cspan class=\"token keyword\">print\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string double-quoted-string\">\"몰루?\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">&amp;&amp;\u003C/span> \u003Cspan class=\"token keyword\">print\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string double-quoted-string\">\"print의 반환값: \"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//출력: \"print의 반환값: 1\"\u003C/span>\n\u003Cspan class=\"token comment\">//위 코드는 \"print의 반환값: \"를 먼저 출력하고 &#96;(\"몰루?\") &amp;&amp; 1&#96;을 계산한 뒤, 그 결과를 출력한다\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Ch3 >2.3 차이점\u003C/h3> \u003Cblockquote>\u003Col >\u003Cli>\u003Ccode>echo\u003C/code>는 여러 개의 인자를, \u003Ccode>print\u003C/code>는 하나의 인자만 받을 수 있다.\u003C/li>\u003C/ol> \u003Cpre class=\"language-php\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-php\">\u003Cspan class=\"token keyword\">echo\u003C/span> \u003Cspan class=\"token string double-quoted-string\">\"안녕,\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\u003Cspan class=\"token string double-quoted-string\">\" 세상!\"\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//출력: \"안녕, 세상!\"\u003C/span>\n\u003Cspan class=\"token keyword\">print\u003C/span> \u003Cspan class=\"token string double-quoted-string\">\"안녕, 세상!\"\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>  \u003Cspan class=\"token comment\">//오류: Parse error: syntax error, unexpected token \",\"\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\u003C/blockquote> \u003Col start=\"2\">\u003Cli>\u003Cp >\u003Ccode>echo\u003C/code>는 출력값을 반환하지 않지만, \u003Ccode>print\u003C/code>는 출력값을 반환한다. (항상 \u003Ccode>1\u003C/code>)\u003Cbr>\n이로 의해 \u003Ccode>print\u003C/code>는 표현식이 들어갈 수 있는 곳에 모두 들어갈 수 있다.\u003C/p> \u003Cpre class=\"language-php\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-php\">\u003Cspan class=\"token keyword\">if\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">print\u003C/span>\u003Cspan class=\"token string double-quoted-string\">\"안녕,\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token keyword\">echo\u003C/span> \u003Cspan class=\"token string double-quoted-string\">\"세상!\"\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//출력: \"안녕,세상!\"\u003C/span>\n\u003Cspan class=\"token keyword\">if\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">echo\u003C/span>\u003Cspan class=\"token string double-quoted-string\">\"안녕,\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token keyword\">print\u003C/span> \u003Cspan class=\"token string double-quoted-string\">\"세상!\"\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//오류: Parse error: syntax error, unexpected token \"echo\"\u003C/span>\n\n\u003Cspan class=\"token constant boolean\">true\u003C/span> \u003Cspan class=\"token operator\">?\u003C/span> \u003Cspan class=\"token keyword\">print\u003C/span> \u003Cspan class=\"token string double-quoted-string\">\"Do!\"\u003C/span> \u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token keyword\">print\u003C/span> \u003Cspan class=\"token string double-quoted-string\">\"Don't\"\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//출력: \"Do!\"\u003C/span>\n\u003Cspan class=\"token constant boolean\">true\u003C/span> \u003Cspan class=\"token operator\">?\u003C/span>  \u003Cspan class=\"token keyword\">echo\u003C/span> \u003Cspan class=\"token string double-quoted-string\">\"Do!\"\u003C/span> \u003Cspan class=\"token punctuation\">:\u003C/span>  \u003Cspan class=\"token keyword\">echo\u003C/span> \u003Cspan class=\"token string double-quoted-string\">\"Don't\"\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//오류: Parse error: syntax error, unexpected token \"echo\"\u003C/span>\n\n\u003Cspan class=\"token comment\">//이를 이용해 아래와 같은 변태짓도 가능은 하다\u003C/span>\n\u003Cspan class=\"token keyword\">print\u003C/span> \u003Cspan class=\"token keyword\">print\u003C/span> \u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token keyword\">print\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token keyword\">print\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//출력: \"4321\";\u003C/span>\n\u003Cspan class=\"token keyword\">print\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">print\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token operator\">+\u003C/span>\u003Cspan class=\"token keyword\">print\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token operator\">+\u003C/span>\u003Cspan class=\"token keyword\">print\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">//출력: \"4321\";\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\u003C/li>\u003C/ol>",[6],"php"],"uses":{"params":["permalink"]}}]}

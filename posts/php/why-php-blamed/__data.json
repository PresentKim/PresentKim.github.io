{"type":"data","nodes":[null,{"type":"data","data":[{"title":1,"summary":2,"formattedDate":3,"content":4,"tags":5},"🐘 PHP? 그거 개그용 언어 아니야?","PHP가 왜 개발자들에게 미움을 받는 지에 대해 조심스럽게 남겨봅니다.","2023-01-27","\u003Ch2 >\u003Cimg src=\"why-php-blamed_title.jpg\" alt=\"js-java-php.jpg\">\u003Cem>🎨 핍박받는 PHP 밈\u003C/em>\u003C/h2> \u003Cp >개발 도중 필요한 정보를 위해서 레딧과 같은 개발 커뮤니티를 돌아다니다 보면 종종 개발자들이 만든 여러 밈(meme)들을 마주치게 됩니다.\n특히 \u003Cem>“HTML은 프로그래밍 언어입니다”, “버그 하나 고치기 == 많은 버그 만들기”\u003C/em> 등등 이런 밈들은 개발에 손 좀 대봤다면 공감하며\n웃음을 불러오죠.\u003C/p> \u003Cp >하지만 수많은 개발 분야가 있다보니 관련 분야의 개발자가 아닌 경우 어떤 조크인지 이해하지 못해 그냥 넘어가는 경우도 많습니다.\n그 중 언어에 관련된 밈들은 대부분 ‘이 문법 안 이상해?’ 라는 식으로 언어를 몰라도 이해할 수 있게 만들어져 있지만,\n유독 \u003Ccode>PHP\u003C/code>를 주제로 한 밈들 중에는 \u003Cem>“PHP 쓰지 마라!”, “PHP 개발자를 피해라!”\u003C/em> 등 언어와 사용자 자체를 그저 비난하는 밈이\n많습니다.\n이 때문에 PHP에 대해 잘 모르지만, 그저 남들따라 PHP를 욕하고 피하는 사람들까지 있을 정도입니다.\u003C/p> \u003Cp >이 포스트는 이렇게 PHP에 대해 알지 못해 관련 밈을 즐기지 못하던 개발자 분들이 PHP가 욕먹는 이유를 더 자세히 알고,\n후에 PHP 밈을 만난다면 \u003Cem>“아 이거 그거지ㅋㅋ”\u003C/em>하고 아는 자만의 웃음을 지으시길 바라며 작성했습니다.\u003C/p> \u003Cpre class=\"language-php\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-php\">\u003Cspan class=\"token variable\">$postPurpose\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\n    \u003Cspan class=\"token string double-quoted-string\">\"PHP에 대해 잘 모르고 욕하는 사람\"\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token string double-quoted-string\">\"제대로 알고나서 문제점을 콕 집어가며 잘 즐겨주세요\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token string double-quoted-string\">\"PHP 밈에 공감 없이 지나가던 사람\"\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token string double-quoted-string\">\"어떤 부분을 비판하는 밈인지 알고나면 더 재미있어요\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token string double-quoted-string\">\"PHP에 대해 잘 알고 사용하는 사람\"\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token string double-quoted-string\">\"생각보다 잘 모르던 문제점도 많을거에요 (그러길 바래요)\"\u003C/span>\n\u003Cspan class=\"token punctuation\">]\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Chr> \u003Cdiv class=\"admonition admonition-danger\" >\u003Cdiv class=\"admonition-heading\">\u003Ch5>\u003Cspan class=\"admonition-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\u003Cpath class=\"outlined\" d=\"M12,8v5m0,3h0M10,4s2-2,4,0m0,0 6,10s5,6-1,6M10,4 4,14s-5,6,1,6h14\">\u003C/path>\u003C/svg>\u003C/span>포스트를 읽기 전 주의사항\u003C/h5>\u003C/div>\u003Cdiv class=\"admonition-content\">\u003Cp>먼저, 이 포스트는 PHP 언어에 대한 비판(비난?)이라는 굉장히 민감한 주제를 다루고 있습니다.\n작성된 내용에 반대되는 의견을 가지는 독자분들을 충분히 존중하고 있습니다.\n대신 아래 사항을 먼저 읽고 난 후 포스트를 즐겨주세요. 언제나 지적과 의견이 담긴 댓글은 환영입니다!\u003C/p>\u003Cul>\u003Cli>❌ \u003Cem>“안써보고 그냥 무작정 욕하는거 아니냐?”\u003C/em> , \u003Cem>“수많은 사이트가 아직도 PHP를 사용하는데…?”\u003C/em>\u003Cblockquote>\u003Cp>저도 2014년에 PHP로 프로그래밍을 시작하고 지금까지도 꾸준히 사용중인 PHP 개발자입니다.\n이 포스트는 제 기준에서 신기하고 재미있던 문제점들을 정리해보고 싶은 마음에 시작되었습니다.\u003C/p>\u003C/blockquote>\u003C/li> \u003Cli>❌ \u003Cem>“이건 단점이라기보단 이런 이런 목적을 가지고 있는건데?”\u003C/em>\u003Cblockquote>\u003Cp>일단 글을 작성할 때 최대한 이유나 예시를 함께 작성해 이해를 도우려고 하고 있습니다.\n긍정적인 역할이나 기능이 있더라도 발생되거나 가능성 있는 문제점을 중점적으로 다루는 중이기 때문에,\n만약 설명이 부족하거나 잘못된 부분이 있다면 댓글을 통해 말씀해주시면 수정하겠습니다.\u003C/p>\u003C/blockquote>\u003C/li> \u003Cli>❌ \u003Cem>“그런 이상한 코드를 작성한 사람 잘못 아니야?”\u003C/em>\u003Cblockquote>\u003Cp>사실 제 생각에는 PHP가 욕먹는 이유의 반 이상이 그 “이상한 사용자”들입니다.\n그런 사용자들이 저지른 실수와 문제가 꽤 재미있게 다가왔기 때문에 이 포스트에 담아두었습니다.\u003C/p>\u003C/blockquote>\u003C/li>\u003C/ul>\u003C/div>\u003C/div> \u003Chr> \u003Ch2 >❓ PHP가 욕을 먹는 이유\u003C/h2> \u003Cp >\u003Cstrong>\u003Cimg src=\"why-php-blamed_php_vs_light_theme.jpg\" alt=\"js-java-php.jpg\">\u003C/strong>\u003C/p> \u003Cp >이제 본격적으로 PHP가 욕을 먹는 이유에 대해 알아봅시다.\nPHP는 많은 개발자들, 심지어는 PHP를 주로 사용하는 개발자들에게까지도 비난 받는 언어입니다.\n자세하게 들어가면 정말 재미있는(?) 문제점들이 많지만, 원인을 기준으로 크게 3가지로 나눠서 작성해보겠습니다.\u003C/p> \u003Col >\u003Cli>PHP는 \u003Cstrong>계획없이\u003C/strong> 여러 개발자의 기여로 만들어졌다.\u003Cbr>\n➡️ 분야를 가리기 않고 언어 전반적으로 비일관적인 상태가 됨\u003C/li> \u003Cli>PHP는 \u003Cstrong>누구나\u003C/strong> 쉽게 사용할 수 있도록 만들어졌다.\u003Cbr>\n➡️ 과도하게 유연한 언어 스펙을 가짐\u003C/li> \u003Cli>PHP는 \u003Cstrong>동적인 웹페이지\u003C/strong>만을 위해 단순하게 만들어졌다.\u003Cbr>\n➡️ 웹에 관한 기능만 중구난방으로 추가됨\u003C/li>\u003C/ol> \u003Cp >위 원인과 그로 인해 발생된 문제점을 한번 알아봅시다.\u003C/p> \u003Chr> \u003Ch3 >🤷‍♂️ 1. PHP는 \u003Cstrong>계획없이\u003C/strong> 여러 개발자의 기여로 만들어졌다. (함수와 상수등의 비일관성)\u003C/h3> \u003Cp >먼저 PHP가 받는 비판의 첫번째는 언어 자체가 일관성이 부족하다는 것입니다.\n프로그래밍 언어는 컴퓨터가 이해할 수 있게 만드는 것 이상으로 사람이 이해할 수 있게 만드는 것이 중요합니다.\n이를 위해서 이름이나 규칙 등을 충분히 예측 가능하고 일관적이게 만드는게 중요하죠.\u003C/p> \u003Cp >하지만 \u003Ca href=\"/posts/php/php-history\">🐘 PHP : 간단하게 알아보는 PHP의 역사\u003C/a> 포스트에서도 언급했듯\nPHP는 애초에 프로그래밍을 위해 계획적으로 설계된 언어가 아니었습니다.\n여러 개발자들이 본인에게 필요한 기능을 하나하나 추가하며 커졌기 때문에,\n해당 기능을 추가한 개발자가 선호하는 코드 스타일을 따르게 되었습니다.\n결국 언어 전반적으로 여러 이름이나 매개변수의 순서 등의 일관성을 지키지 못한 언어가 되었습니다.\u003C/p> \u003Col >\u003Cli>\u003Cp>이름을 보고 정체를 알기가 어려운 경우\u003C/p> \u003Cul>\u003Cli>\u003Ccode>gzgetss\u003C/code> (gz 파일 포인터에서 한 줄을 읽어서 HTML 태그를 벗겨낸 결과를 반환하는 함수)\u003C/li>\u003C/ul>\u003C/li> \u003Cli>\u003Cp>비슷한 목적을 가졌으나 네이밍 방식이 다른 경우\u003C/p> \u003Cul>\u003Cli>슈퍼글로벌 변수: \u003Ccode>$GLOBALS\u003C/code>, \u003Ccode>$_FILES\u003C/code>\u003C/li> \u003Cli>문자열관련 함수: \u003Ccode>strpos\u003C/code>, \u003Ccode>str_rot13\u003C/code>\u003C/li> \u003Cli>…(이런 경우는 너무 많습니다)\u003C/li>\u003C/ul>\u003C/li> \u003Cli>\u003Cp>함수로도, 변수로도 존재하는 경우\u003C/p> \u003Cul>\u003Cli>파이값: \u003Ccode>M_PI\u003C/code>, \u003Ccode>pi()\u003C/code>\u003C/li>\u003C/ul>\u003C/li> \u003Cli>\u003Cp>비슷한 기능의 인자 순서가 다른 경우\u003C/p> \u003Cul>\u003Cli>\u003Ccode>array_map(callable,array)\u003C/code>, \u003Ccode>array_filter(array,callable)\u003C/code>\u003C/li>\u003C/ul>\u003C/li> \u003Cli>\u003Cp>매개변수를 아무렇게나 지원하는 경우\u003C/p> \u003Cul>\u003Cli>\u003Ccode>join(array)\u003C/code>, \u003Ccode>join(array,string)\u003C/code>, \u003Ccode>join(string,array)\u003C/code>\u003C/li>\u003C/ul>\u003C/li>\u003C/ol> \u003Chr> \u003Ch3 >🥴 너무 유하게 허용하는 예외 문법\u003C/h3> \u003Cp >PHP는 누구나 웹페이지를 쉽게 만들 수 있게 해주겠다는 목표의식이 있었기 때문에,\n개발에 대한 경험이 많지 않은 사람들도 쉽게 사용할 수 있도록 여러가지는 고안해냈습니다.\n하지만 이것은 결국 문법적으로도 엄청난 문제가 되었습니다.\n먼저 인터프리터 언어들이 흔히 갖는 \u003Ccode>&quot;0&quot; == 0 === true\u003C/code>와 같은 약타입 검사로 인한 문제는 제외하더라도 엄청난 문제들이 존재했죠.\u003C/p> \u003Col >\u003Cli>존재하지 않는 상수는 문자열로 인정\nPHP에는 PHP7 이전까지 “상수나 함수의 이름으로 존재하지않는 문자”을 코드에 작성할 경우 “문자열”로 처리하는 엄청난 호환성(?)이\n있었습니다.\n\u003Ccode>define(TEST, 1);\u003C/code>와 같이 define을 사용 할 때 상수명을 \u003Cem>“상수답게” 작성하는 실수\u003C/em>를 용인해줘야한다고 생각한건지\n뭔지 이유가 전 상상이 안갑니다.\u003C/li>\u003C/ol> \u003Cp >어쨋든 이에 의해 \u003Ccode>TEST\u003C/code>라는 상수를 정의하지 않은 채로 \u003Ccode>print(TEST)\u003C/code>를 입력할 경우, 이 코드는 \u003Ccode>print(&#39;TEST&#39;)\u003C/code>로\n처리됩니다.\n따라서 위 방식을 이용해 \u003Ccode>print(TEST . define(TEST, 1) . TEST);\u003C/code>라고 작성하면 이는 \u003Ccode>TEST11\u003C/code>을 출력합니다.\u003C/p> \u003Cp >물론 저렇게까지 이상한 짓을 하는 변태는 어쩔 수 없지만, 진짜 문제는 이제 저게 오타로 인해 발생될 때가 있다는 겁니다.\n예를 들어 \u003Ccode>null\u003C/code>을 입력해야하는데 다른 언어랑 헷갈려서 \u003Ccode>nil\u003C/code>이라고 입력하거나 \u003Ccode>nulll\u003C/code>이라고 입력했으면 그건 그냥 그 문자열이\n되어버리기 때문에\n로직이 비정상적으로 작동하는 경우가 발생합니다.\u003C/p> \u003Cbr> \u003Col start=\"2\" >\u003Cli>오류는 \u003Ccode>@\u003C/code>로 무시\nPHP는 무려 오류 처리가 귀찮거나 어려운 경우를 위해서 @라는 문법이 존재합니다.\n모든 오류를 다 막을 수 있는 것은 아니었지만, \u003Ccode>file_get_contents(string)\u003C/code>와 같이 파일이 존재하지 않을 경우 오류가\n나야하는 함수를\n\u003Ccode>@file_get_contents(string)\u003C/code>이런 형식으로 사용하면 오류대신 \u003Ccode>false\u003C/code>를 반환합니다.\n이 문법이 유용할때도 있었지만 예외를 모두 저렇게 처리하는 습관을 만들어버리는 것도 PHP가 욕먹는 이유중 하나가 되었죠.\u003C/li>\u003C/ol> \u003Cbr> \u003Col start=\"3\" >\u003Cli>모든 문자열은 숫자가 될 수 있다\n다른 약타입 언어들은 잘못된 문자열을 숫자로 변환할때 \u003Ccode>NaN\u003C/code>이라는 값을 주거나 오류가 발생하는 것과 달리,\nPHP는 친절하게 \u003Ccode>0\u003C/code>으로 처리해줍니다. 예를 들어 \u003Ccode>(int) &quot;TEST&quot;\u003C/code>는 \u003Ccode>0\u003C/code>으로 처리하는 식이었기\n때문에 \u003Ccode>0 == &quot;TEST&quot;\u003C/code>라는 조건식의 결과로 \u003Ccode>true\u003C/code>가 나오는 엄청난 언어가 되었습니다.\n이는 예상가능하듯 여러 로직에서 치명적인 함정이 되어 작동했기 때문에 이런 상황에 욕이 안나올 수 없겠죠.\u003C/li>\u003C/ol> \u003Cp >이 외에도 \u003Ccode>&quot;100 999\u003C/code>라는 문자열이 존재한다면 PHP는 친절하게 앞 숫자만 잘라서 \u003Ccode>100\u003C/code>으로 처리해줍니다.\n아 물론 \u003Ccode>&quot;100_999&quot;\u003C/code> 나 \u003Ccode>&quot;100-99&quot;\u003C/code>는 물론 \u003Ccode>&quot;100가999&quot;\u003C/code>와 같은 모든 문자열은 \u003Ccode>100\u003C/code>으로 처리됩니다.\n이 규칙은 전화번호 문자열을 처리할 때 실수 한번으로 모든 사람의 전화번호가 앞자리인 \u003Ccode>10\u003C/code>로 변환되는 상황을 발생시키죠.\u003C/p> \u003Cbr> \u003Col start=\"4\" >\u003Cli>\u003C/li>\u003C/ol> \u003Chr> \u003Ch2 >📌 참고 문헌\u003C/h2> \u003Cul >\u003Cli>\u003Ca href=\"https://en.wikipedia.org/wiki/PHP\" rel=\"noopener noreferrer\" target=\"_blank\">https://en.wikipedia.org/wiki/PHP\u003C/a>\u003C/li> \u003Cli>\u003Ca href=\"https://ko.wikipedia.org/wiki/PHP\" rel=\"noopener noreferrer\" target=\"_blank\">https://ko.wikipedia.org/wiki/PHP\u003C/a>\u003C/li> \u003Cli>\u003Ca href=\"https://www.php.net/manual/en/history.php.php\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.php.net/manual/en/history.php.php\u003C/a>\u003C/li> \u003Cli>\u003Ca href=\"https://www.php.net/manual/phpfi2.php\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.php.net/manual/phpfi2.php\u003C/a>\u003C/li> \u003Cli>\u003Ca href=\"https://www.php.net/manual/php3.php\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.php.net/manual/php3.php\u003C/a>\u003C/li>\u003C/ul>",[6],"php"],"uses":{"params":["permalink"]}}]}
